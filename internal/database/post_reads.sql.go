// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post_reads.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPostRead = `-- name: CreatePostRead :one
INSERT INTO post_reads (id, created_at, updated_at, user_id, post_id, read_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, user_id, post_id, read_at
`

type CreatePostReadParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	PostID    uuid.UUID
	ReadAt    time.Time
}

func (q *Queries) CreatePostRead(ctx context.Context, arg CreatePostReadParams) (PostRead, error) {
	row := q.db.QueryRowContext(ctx, createPostRead,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.PostID,
		arg.ReadAt,
	)
	var i PostRead
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostID,
		&i.ReadAt,
	)
	return i, err
}

const deletePostRead = `-- name: DeletePostRead :exec
DELETE FROM post_reads
WHERE user_id = $1 AND post_id = $2
`

type DeletePostReadParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) DeletePostRead(ctx context.Context, arg DeletePostReadParams) error {
	_, err := q.db.ExecContext(ctx, deletePostRead, arg.UserID, arg.PostID)
	return err
}

const getUserReadPosts = `-- name: GetUserReadPosts :many
SELECT p.id, p.created_at, p.updated_at, p.title, p.url, p.description, p.published_at,
       f.name as feed_name, pr.read_at
FROM post_reads pr
JOIN posts p ON pr.post_id = p.id
JOIN feeds f ON p.feed_id = f.id
WHERE pr.user_id = $1
ORDER BY pr.read_at DESC
LIMIT $2 OFFSET $3
`

type GetUserReadPostsParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetUserReadPostsRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedName    string
	ReadAt      time.Time
}

func (q *Queries) GetUserReadPosts(ctx context.Context, arg GetUserReadPostsParams) ([]GetUserReadPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserReadPosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserReadPostsRow
	for rows.Next() {
		var i GetUserReadPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedName,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isPostRead = `-- name: IsPostRead :one
SELECT EXISTS(
    SELECT 1 FROM post_reads
    WHERE user_id = $1 AND post_id = $2
) as is_read
`

type IsPostReadParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) IsPostRead(ctx context.Context, arg IsPostReadParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isPostRead, arg.UserID, arg.PostID)
	var is_read bool
	err := row.Scan(&is_read)
	return is_read, err
}
